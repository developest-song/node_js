GET
주소값을 이용해 요청하는 방식
형식 - 주소 끝에 ? 붙이고 키1=값1&키2=값2 ex) https://news.naver.com/main/list.naver?mode=LPOD&mid=sec&sid1=001&sid2=140&oid=001&isYeonhapFlash=Y&aid=0012752324
실제 주소값 뒤에 붙어가는 값을 Query String이라고 한다.

- server_request_get.js
var http = require('http');

// 1. 요청한 url을 객체로 만들기 위해 url 모듈사용
var url = require('url');
// 2. 요청한 url 중에 Query String 을 객체로 만들기 위해 querystring 모듈 사용
var querystring = require('querystring'); 

var server = http.createServer(function(request,response){
    // 3. 콘솔화면에 로그 시작 부분을 출력
    console.log('--- log start ---');
    // 4. 브라우저에서 요청한 주소를 parsing 하여 객체화 후 출력
    var parsedUrl = url.parse(request.url);
    console.log(parsedUrl);
    // 5. 객체화된 url 중에 Query String 부분만 따로 객체화 후 출력
    var parsedQuery = querystring.parse(parsedUrl.query,'&','=');
    console.log(parsedQuery);
    // 6. 콘솔화면에 로그 종료 부분을 출력
    console.log('--- log end ---');

    response.writeHead(200, {'Content-Type':'text/html'});
    response.end('Hello node.js!!');
});

server.listen(8080, function(){
    console.log('Server is running...');
});

로그 분석 (log start가 두번 찍히는데, 두번째 로그는 favicon(탭의 앞 아이콘)에 대한 로그)
--- log start ---
Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?var1=newData&var2=153&var3=testdata2017',
  query: 'var1=newData&var2=153&var3=testdata2017',
  pathname: '/',
  path: '/?var1=newData&var2=153&var3=testdata2017',
  href: '/?var1=newData&var2=153&var3=testdata2017'
}
[Object: null prototype] {
  var1: 'newData',
  var2: '153',
  var3: 'testdata2017'
}
--- log end ---
