GET
주소값을 이용해 요청하는 방식
형식 - 주소 끝에 ? 붙이고 키1=값1&키2=값2 ex) https://news.naver.com/main/list.naver?mode=LPOD&mid=sec&sid1=001&sid2=140&oid=001&isYeonhapFlash=Y&aid=0012752324
실제 주소값 뒤에 붙어가는 값을 Query String이라고 한다.

- server_request_get.js
var http = require('http');

// 1. url - 클라이언트가 요청한 주소값을 javascript 객체로 변환해서 사용할 수 있게 하는 모듈
var url = require('url');
// 2. querystring은 주소로 전달된 Query String을 변환해서 javascript 객체로 사용할 수 있게 해주는 모듈
var querystring = require('querystring'); 

var server = http.createServer(function(request,response){
    // 3. 콘솔화면에 로그 시작 부분을 출력
    console.log('--- log start ---');
    // 4. 브라우저에서 요청한 주소를 parsing 하여 객체화 후 출력
    var parsedUrl = url.parse(request.url);
    console.log(parsedUrl);
    // 5. 객체화된 url 중에 Query String 부분만 따로 객체화 후 출력(구분자 변경 가능)
    var parsedQuery = querystring.parse(parsedUrl.query,'&','=');
    console.log(parsedQuery);
    // 6. 콘솔화면에 로그 종료 부분을 출력
    console.log('--- log end ---');

    response.writeHead(200, {'Content-Type':'text/html'});
    response.end('Hello node.js!!');
    //response.end('var1 - '+parsedQuery.var1 + ',var2 - '+parsedQuery.var2+',var3 - '+parsedQuery.var3); //var1 쓰는 예

});

server.listen(8080, function(){
    console.log('Server is running...');
});

로그 분석 (log start가 두번 찍히는데, 두번째 로그는 favicon(탭의 앞 아이콘)에 대한 로그)
--- log start ---
// var parsedUrl = url.parse(주소); 주소값을 객체화 , parsedUrl.search 형태로 객체 내부의 변수값 사용 가능 
Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?var1=newData&var2=153&var3=testdata2017',
  query: 'var1=newData&var2=153&var3=testdata2017',
  pathname: '/',
  path: '/?var1=newData&var2=153&var3=testdata2017',
  href: '/?var1=newData&var2=153&var3=testdata2017'
}
// var parsedQuery = querystring.parse(parsedUrl.query,'&','='); 
// parsedUrl 객체에서 query라는 변수 값을 다시 querystring으로 parsing하여 객체화
// parsedQuery.var1 형태로 객체내부의 값 사용 가능 
[Object: null prototype] {
  var1: 'newData',
  var2: '153',
  var3: 'testdata2017'
}
--- log end ---


POST
주소만 요청하고 변수와 값을 주소가 아닌 요청 BODY에 담아서 서버측에 요청

- server_request_post.js

var http = require('http');
var querystring = require('querystring');

var server = http.createServer(function(request,response){
  // 1. post로 전달된 데이터를 담을 변수를 선언
  var postdata = '';
  // 2. request객체에 on( ) 함수로 'data' 이벤트를 연결
  request.on('data', function (data) {
    // 3. data 이벤트가 발생할 때마다 callback을 통해 postdata 변수에 값을 저장
    postdata = postdata + data;
  });

  // 4. request객체에 on( ) 함수로 'end' 이벤트를 연결
  request.on('end', function () {
    // 5. end 이벤트가 발생하면(end는 한버만 발생한다) 3번에서 저장해둔 postdata 를 querystring 으로 객체화
    var parsedQuery = querystring.parse(postdata);
    // 6. 객체화된 데이터를 로그로 출력
    console.log(parsedQuery);
    // 7. 성공 HEADER 와 데이터를 담아서 클라이언트에 응답처리
    response.writeHead(200, {'Content-Type':'text/html'});
    response.end('var1의 값 = ' + result); //???????
  });

});

server.listen(8080, function(){
    console.log('Server is running...');
});

