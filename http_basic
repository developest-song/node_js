// 1. 서버 사용을 위해서 http 모듈을 http 변수에 담는다. (모듈과 변수의 이름은 달라도 된다.) 
// require는 다른 언어의 import와 유사한 기능
var http = require('http'); 

// 2. http 모듈로 서버를 생성한다.
//    아래와 같이 작성하면 서버를 생성한 후, 사용자로 부터 http 요청이 들어오면 function 블럭내부의 코드를 실행해서 응답한다.
// createServer()의 function은 함수명이 없음. 이벤트 발생시에 callback된다.
var server = http.createServer(function(request,response){ 

    response.writeHead(200,{'Content-Type':'text/html'});
    response.end('Hello node.js!!');

});

// 3. listen 함수로 8080 포트를 가진 서버를 실행한다. 서버가 실행된 것을 콘솔창에서 확인하기 위해 'Server is running...' 로그를 출력한다
server.listen(8080, function(){ 
    console.log('Server is running...');
});


** 동기/ 비동기 프로그래밍 차이 **
예제)
공통
const test = require('fs'); //fs - 파일을 핸들링하는 모듈
1) 동기실행
console.log("start");
let content = test.readFileSync('./new','utf8'); // 파일 읽어서 변수에 저장하기(동기실행함수)
console.log(content);
console.log("finish");

2) 비동기실행
console.log("start");
test.readFile('./new','utf8',(error,data) => {
 console.log(data);
});
console.log("finish");

결과는 2번 실행시 finish가 test.readFile. 보다 먼저 출력된다.
이유는 비동기 함수 readFile()이 텍스트 파일을 읽는 동안 finish가 먼저 수행되기 때문이다.

setTimeout(() => { num = 1; }, 1000); 
num = 2;
console.log(num);
// num 2가 출력, setTimeout의 두번째 인자를 0으로 넣어도 num 2가 출력
이유는 Node로 js파일을 실행 시 하나의 스레드가 js 코드를 실행하고, 그 후 그 스레드가 콜백들을 관리하기에 비동기함수는 늦게 실행된다

